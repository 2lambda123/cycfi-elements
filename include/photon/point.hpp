/*=================================================================================================   Copyright (c) 2016 Joel de Guzman   Licensed under a Creative Commons Attribution-ShareAlike 4.0 International.   http://creativecommons.org/licenses/by-sa/4.0/=================================================================================================*/#if !defined(PHOTON_GUI_LIB_POINT_APRIL_10_2016)#define PHOTON_GUI_LIB_POINT_APRIL_10_2016namespace photon{   ////////////////////////////////////////////////////////////////////////////////////////////////   // Points   ////////////////////////////////////////////////////////////////////////////////////////////////   struct point   {      constexpr   point();      constexpr   point(double x, double y);                  point(point const&) = default;      point&      operator=(point const&) = default;      bool        operator==(point const& other) const;      bool        operator!=(point const& other) const;      void        move(double dx, double dy);      void        move_to(double x, double y);      double      x;      double      y;   };   ////////////////////////////////////////////////////////////////////////////////////////////////   // Inlines   ////////////////////////////////////////////////////////////////////////////////////////////////   inline constexpr point::point()    : x(0.0), y(0.0)   {}   inline constexpr point::point(double x, double y)    : x(x), y(y)   {}   inline bool point::operator==(point const& other) const   {      return (other.x == x) && (other.y == y);   }   inline bool point::operator!=(point const& other) const   {      return !(*this == other);   }   inline void point::move(double dx, double dy)   {      x += dx;      y += dy;   }   inline void point::move_to(double x_, double y_)   {      x = x_;      y = y_;   }}#endif