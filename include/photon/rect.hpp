/*=================================================================================================   Copyright (c) 2016 Joel de Guzman   Licensed under a Creative Commons Attribution-ShareAlike 4.0 International.   http://creativecommons.org/licenses/by-sa/4.0/=================================================================================================*/#if !defined(PHOTON_GUI_LIB_RECT_APRIL_10_2016)#define PHOTON_GUI_LIB_RECT_APRIL_10_2016#include <photon/point.hpp>namespace photon{   ////////////////////////////////////////////////////////////////////////////////////////////////   // rect   ////////////////////////////////////////////////////////////////////////////////////////////////   struct rect   {      constexpr   rect();      constexpr   rect(double left, double top, double right, double bottom);                  rect(rect const&) = default;      rect&       operator=(rect const&) = default;      bool        operator==(rect const& other) const;      bool        operator!=(rect const& other) const;      bool        is_empty() const;      bool        includes(point const& p) const;      bool        includes(rect const& other) const;      double      width() const;      void        width(double width_);      double      height() const;      void        height(double height_);      point       top_left() const;      point       bottom_right() const;      rect&       move(double dx, double dy);      rect&       move_to(double x, double y);      double      top;      double      left;      double      bottom;      double      right;   };   ////////////////////////////////////////////////////////////////////////////////////////////////   // Free Functions   ////////////////////////////////////////////////////////////////////////////////////////////////   bool     is_valid(rect const& r);   bool     is_same_size(rect const& a, rect const& b);   bool     intersects(rect const& a, rect const& b);   point    center_point(rect const& r);   double   area(rect const& r);   rect     max(rect const& a, rect const& b);   rect     min(rect const& a, rect const& b);   void     clear(rect& r);   rect&    inset(rect& r, double x_inset = 1.0, double y_inset = 1.0);   rect&    center(rect& r, rect const& encl, bool h, bool v);   rect&    align(rect& r, rect const& encl, double x_align, double y_align);   rect&    clip(rect& r, rect const& encl);   ////////////////////////////////////////////////////////////////////////////////////////////////   // Inlines   ////////////////////////////////////////////////////////////////////////////////////////////////   inline constexpr rect::rect()    : left(0.0), top(0.0), right(0.0), bottom(0.0)   {}   inline constexpr rect::rect(double left, double top, double right, double bottom)    : left(left), top(top), right(right), bottom(bottom)   {}   inline bool rect::operator==(rect const& other) const   {      return         (top == other.top) && (bottom == other.bottom) &&         (left == other.left) && (right == other.right)         ;   }   inline bool rect::operator!=(rect const& other) const   {      return !(*this == other);   }   inline bool rect::is_empty() const   {      return (left == right) || (top == bottom);   }   inline bool rect::includes(point const& p) const   {      return         (p.x >= left) && (p.x <= right) &&         (p.y >= top) && (p.y <= bottom)         ;   }   inline bool rect::includes(rect const& other) const   {      return         (other.left >= left) && (other.left <= right) &&         (other.top >= top) && (other.top <= bottom) &&         (other.right >= left) && (other.right <= right) &&         (other.bottom >= top) && (other.bottom <= bottom)         ;   }   inline double rect::width() const   {      return right - left;   }   inline void rect::width(double width_)   {      right = left + width_;   }   inline double rect::height() const   {      return (bottom - top);   }   inline void rect::height(double height_)   {      bottom = top + height_;   }   inline point rect::top_left() const   {      return { left, top };   }   inline point rect::bottom_right() const   {      return { right, bottom };   }   inline rect& rect::move(double dx, double dy)   {      top += dy;      left += dx;      bottom += dy;      right += dx;      return *this;   }   inline rect& rect::move_to(double x, double y)   {      move(x-left, y-top);      return *this;   }   inline bool is_valid(rect const& r)   {      return (r.left <= r.right) && (r.top <= r.bottom);   }   inline bool is_same_size(rect const& a, rect const& b)   {      return (a.width() == b.width()) && (a.height() == b.height());   }   inline point center_point(rect const& r)   {      return { r.left + (r.width() / 2.0), r.top + (r.height() / 2.0) };   }   inline double area(rect const& r)   {      return r.width() * r.height();   }   inline void clear(rect& r)   {      r.left = 0.0;      r.top  = 0.0;      r.right = 0.0;      r.bottom = 0.0;   }}#endif