/*=================================================================================================   Copyright (c) 2016 Joel de Guzman   Licensed under a Creative Commons Attribution-ShareAlike 4.0 International.   http://creativecommons.org/licenses/by-sa/4.0/=================================================================================================*/#if !defined(PHOTON_GUI_LIB_CIRCLE_APRIL_17_2016)#define PHOTON_GUI_LIB_CIRCLE_APRIL_17_2016namespace photon{   ////////////////////////////////////////////////////////////////////////////////////////////////   // Circles   ////////////////////////////////////////////////////////////////////////////////////////////////   struct circle   {      constexpr   circle();      constexpr   circle(double cx, double cy, double radius);                  circle(circle const&) = default;      circle&     operator=(circle const&) = default;      rect        bounds() const { return { cx-radius, cy-radius, cx+radius, cy+radius }; }      bool        operator==(circle const& other) const;      bool        operator!=(circle const& other) const;      double      cx;      double      cy;      double      radius;   };   ////////////////////////////////////////////////////////////////////////////////////////////////   // Inlines   ////////////////////////////////////////////////////////////////////////////////////////////////   inline constexpr circle::circle()    : cx(0.0), cy(0.0), radius(0.0)   {}   inline constexpr circle::circle(double cx, double cy, double radius)    : cx(cx), cy(cy), radius(radius)   {}   inline bool circle::operator==(circle const& other) const   {      return (other.cx == cx) && (other.cy == cy) && (other.radius == radius);   }   inline bool circle::operator!=(circle const& other) const   {      return !(*this == other);   }}#endif