/*=================================================================================================   Copyright (c) 2016 Joel de Guzman   Licensed under a Creative Commons Attribution-ShareAlike 4.0 International.   http://creativecommons.org/licenses/by-sa/4.0/=================================================================================================*/#include <photon/support.hpp>#include <photon/rect.hpp>#include <algorithm>namespace photon{   bool intersects(rect const& a, rect const& b)   {      if (!is_valid(a) || !is_valid(b))         return false;      return			(std::max(b.left, b.left) <= std::min(b.right, b.right)) &&         (std::max(b.top, b.top) <= std::min(b.bottom, b.bottom))			;   }   rect max(rect const& a, rect const& b)   {      return {         std::min(a.left, b.left),         std::min(a.top, b.top),         std::max(a.right, b.right),         std::max(a.bottom, b.bottom)		};   }   rect min(rect const& a, rect const& b)   {      return {         std::max(a.left, b.left),         std::max(a.top, b.top),         std::min(a.right, b.right),         std::min(a.bottom, b.bottom)		};   }   rect& inset(rect& r, double x_inset, double y_inset)   {      r.top += y_inset;      r.left += x_inset;      r.bottom -= y_inset;      r.right -= x_inset;      if (!is_valid(r))         clear(r);      return r;   }   rect& center(rect& r, rect const& encl, bool h, bool v)   {      double x = r.left;      double y = r.top;      double dx = 0.0;      double dy = 0.0;      if (h)      {         x = encl.left;         dx = (encl.right - r.right) / 2.0;      }      if (v)      {         y = encl.top;         dy = (encl.bottom - r.bottom) / 2.0;      }      r.move_to(x, y);      r.move(dx, dy);      return r;   }   rect& align(rect& r, rect const& encl, double x_align, double v_align)   {      r.move_to(			encl.left + ((encl.width() - r.width()) * x_align),         encl.top + ((encl.height() - r.height()) * v_align));      return r;   }   rect& clip(rect& r, rect const& encl)   {      min_limit(r.left, encl.left);      min_limit(r.top, encl.top);      max_limit(r.right, encl.right);      max_limit(r.bottom, encl.bottom);      return r;   }}