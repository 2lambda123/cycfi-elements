/*=================================================================================================   Copyright (c) 2016 Joel de Guzman   Licensed under a Creative Commons Attribution-ShareAlike 4.0 International.   http://creativecommons.org/licenses/by-sa/4.0/=================================================================================================*/#include <photon/support/pixmap.hpp>#define STB_IMAGE_IMPLEMENTATION#include <photon/support/detail/stb_image.h>namespace photon{   pixmap::pixmap(char const* filename)    : _surface(nullptr)   {      int components;      int w, h;      uint8_t* data = stbi_load(filename, &w, &h, &components, 4);      if (data)      {          _surface = cairo_image_surface_create(CAIRO_FORMAT_ARGB32, w, h);          uint8_t* c_data = cairo_image_surface_get_data(_surface);          size_t   i_stride = w * 4;          size_t   o_stride = cairo_image_surface_get_stride(_surface);          for (size_t y = 0; y != h; ++y)          {             uint8_t* ip = data + (y * i_stride);             uint8_t* op = c_data + (y * o_stride);             for (size_t x = 0; x != w; ++x)             {                op[0] = ip[2];    // blue                op[1] = ip[1];    // green                op[2] = ip[0];    // red                op[3] = ip[3];    // alpha                ip += 4;                op += 4;             }          }          cairo_surface_mark_dirty(_surface);          stbi_image_free(data);      }      // $$$ TODO: throw load failure $$$   }   photon::size pixmap::size() const   {      return {         float(cairo_image_surface_get_width(_surface)),         float(cairo_image_surface_get_height(_surface))      };   }}